<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.Buttons.xaml" />
        <ResourceDictionary Source="../ColorDictionary.xaml" />
        <ResourceDictionary Source="../Fonts.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <system:Double x:Key="LargeButtonFontSize">16</system:Double>

    <Style x:Key="DefaultButton" BasedOn="{StaticResource SquareButtonStyle}" TargetType="{x:Type ButtonBase}" x:Shared="False">
        <Style.Resources>
            <SolidColorBrush x:Key="ForegroundBrush" Color="{Binding Color, Source={StaticResource DefaultButtonForegroundBrush}}" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Color, Source={StaticResource DefaultButtonBackgroundBrush}}" />
            <SolidColorBrush x:Key="BorderBrush" Color="{Binding Color, Source={StaticResource DefaultButtonBorderBrush}}" />
        </Style.Resources>

        <Setter Property="FontFamily" Value="{StaticResource Inter}" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="Padding" Value="10 5" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="33" />
        <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Normal" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Border.CornerRadius" Value="2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border
                        VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <!-- Use Border as mask to cut the outer corners -->
                        <Border.OpacityMask>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Border SnapsToDevicePixels="True"
                                            Background="Black"
                                            BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType=Border}}"
                                            CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType=Border}}"
                                            Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}}"
                                            Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}" />
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.OpacityMask>

                        <Grid>

                            <!-- Mouse Animation Layer -->
                            <Grid Background="Black" Opacity="0">
                                <Grid.Triggers>
                                    <EventTrigger RoutedEvent="MouseEnter">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                    Storyboard.TargetProperty="(Grid.Opacity)"
                                                    From="0" To="0.1" Duration="0:0:0.15" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                    <EventTrigger RoutedEvent="MouseLeave">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                                                    Storyboard.TargetProperty="(Grid.Opacity)"
                                                    From="0.1" To="0" Duration="0:0:0.15" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Grid.Triggers>
                            </Grid>

                            <ContentPresenter IsHitTestVisible="true"
                                              RecognizesAccessKey="True"
                                              Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" >
                                <ContentPresenter.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>

                            <!-- Disabled Layer -->
                            <Grid Background="White" IsHitTestVisible="False">
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="True">
                                                <Setter Property="Opacity" Value="0" />
                                            </Trigger>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Opacity" Value="0.4" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LargeDefaultButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Setter Property="FontSize" Value="{StaticResource LargeButtonFontSize}" />
        <Setter Property="Height" Value="40" />
        <Setter Property="MinWidth" Value="110" />
        <Setter Property="Padding" Value="10 5" />
    </Style>

    <Style x:Key="CancelButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <SolidColorBrush x:Key="ForegroundBrush" Color="{Binding Color, Source={StaticResource CancelButtonForegroundBrush}}" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Color, Source={StaticResource CancelButtonBackgroundBrush}}" />
        </Style.Resources>

        <Style.Setters>
            <Setter Property="MinWidth" Value="110" />
            <Setter Property="BorderThickness" Value="0" />
        </Style.Setters>
    </Style>

    <Style x:Key="AffirmativeButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <SolidColorBrush x:Key="ForegroundBrush" Color="{Binding Color, Source={StaticResource AffirmativeButtonForegroundBrush}}" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Color, Source={StaticResource AffirmativeButtonBackgroundBrush}}" />
        </Style.Resources>

        <Style.Setters>
            <Setter Property="MinWidth" Value="110" />
            <Setter Property="BorderThickness" Value="0" />
        </Style.Setters>
    </Style>

    <Style x:Key="AccentButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <SolidColorBrush x:Key="ForegroundBrush" Color="{Binding Color, Source={StaticResource AffirmativeButtonForegroundBrush}}" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Color, Source={StaticResource AccentButtonBackgroundBrush}}" />
        </Style.Resources>

        <Style.Setters>
            <Setter Property="MinWidth" Value="110" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Margin" Value="10 0 0 0" />
        </Style.Setters>
    </Style>

    <Style x:Key="DefaultInlineButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Style.Setters>
            <Setter Property="MinWidth" Value="110" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Margin" Value="10 0 0 0" />
        </Style.Setters>
    </Style>

    <Style x:Key="BrightButton" BasedOn="{StaticResource DefaultButton}" TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <SolidColorBrush x:Key="ForegroundBrush" Color="{Binding Color, Source={StaticResource BrightButtonForegroundBrush}}" />
            <SolidColorBrush x:Key="BackgroundBrush" Color="{Binding Color, Source={StaticResource BrightButtonBackgroundBrush}}" />
        </Style.Resources>

        <Style.Setters>
            <Setter Property="Height" Value="33" />
            <Setter Property="Padding" Value="10 0" />
            <Setter Property="MinWidth" Value="110" />
            <Setter Property="BorderThickness" Value="0" />
        </Style.Setters>
    </Style>

    <Style x:Key="TransparentButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!-- Transparent Grid for MouseOver -->
                    <Grid Background="Transparent">
                        <ContentControl Content="{TemplateBinding Content}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
