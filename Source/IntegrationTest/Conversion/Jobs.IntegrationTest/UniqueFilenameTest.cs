using NSubstitute;
using NUnit.Framework;
using PDFCreator.TestUtilities;
using pdfforge.PDFCreator.Conversion.Settings.Enums;
using pdfforge.PDFCreator.Core.Workflow;
using System.IO;

namespace pdfforge.PDFCreator.IntegrationTest.Conversion.Jobs
{
    [TestFixture]
    public class UniqueFilenameTest
    {
        [SetUp]
        public void SetUp()
        {
            var bootstrapper = new IntegrationTestBootstrapper();
            var container = bootstrapper.ConfigureContainer();
            container.Options.AllowOverridingRegistrations = true;
            container.Register(() => Substitute.For<IJobCleanUp>());
            _th = container.GetInstance<TestHelper>();
            _th.InitTempFolder("UniqueFilenameTest");
        }

        [TearDown]
        public void CleanUp()
        {
            _th?.CleanUp();
            TempFileHelper.CleanUp();
        }

        private TestHelper _th;

        [Test]
        public void TestEnsureUniqueFilename()
        {
            var tempFolder = TempFileHelper.CreateTempFolder("TestEnsureUniqueFilename");

            _th.Profile.AutoSave.Enabled = true;
            _th.Profile.AutoSave.EnsureUniqueFilenames = true;

            _th.GenerateGsJob(PSfiles.PDFCreatorTestpage, OutputFormat.Pdf);

            var outputFile = Path.Combine(tempFolder, "doc.pdf");
            _th.Job.OutputFileTemplate = outputFile;
            _th.RunGsJob();

            _th.GenerateGsJob(PSfiles.PDFCreatorTestpage, OutputFormat.Pdf);

            _th.Job.OutputFileTemplate = outputFile;
            _th.RunGsJob();

            Assert.IsTrue(File.Exists(outputFile), "Outputfile does not exist!");
            Assert.IsTrue(File.Exists(Path.Combine(tempFolder, "doc_2.pdf")), "File generated by EnsureUniqueFilename does not exist!");
        }
    }
}
